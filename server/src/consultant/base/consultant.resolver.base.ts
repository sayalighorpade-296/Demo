/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateConsultantArgs } from "./CreateConsultantArgs";
import { UpdateConsultantArgs } from "./UpdateConsultantArgs";
import { DeleteConsultantArgs } from "./DeleteConsultantArgs";
import { ConsultantFindManyArgs } from "./ConsultantFindManyArgs";
import { ConsultantFindUniqueArgs } from "./ConsultantFindUniqueArgs";
import { Consultant } from "./Consultant";
import { ConsultantService } from "../consultant.service";

@graphql.Resolver(() => Consultant)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ConsultantResolverBase {
  constructor(
    protected readonly service: ConsultantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Consultant",
    action: "read",
    possession: "any",
  })
  async _consultantsMeta(
    @graphql.Args() args: ConsultantFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Consultant])
  @nestAccessControl.UseRoles({
    resource: "Consultant",
    action: "read",
    possession: "any",
  })
  async consultants(
    @graphql.Args() args: ConsultantFindManyArgs
  ): Promise<Consultant[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Consultant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Consultant",
    action: "read",
    possession: "own",
  })
  async consultant(
    @graphql.Args() args: ConsultantFindUniqueArgs
  ): Promise<Consultant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consultant)
  @nestAccessControl.UseRoles({
    resource: "Consultant",
    action: "create",
    possession: "any",
  })
  async createConsultant(
    @graphql.Args() args: CreateConsultantArgs
  ): Promise<Consultant> {
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Consultant)
  @nestAccessControl.UseRoles({
    resource: "Consultant",
    action: "update",
    possession: "any",
  })
  async updateConsultant(
    @graphql.Args() args: UpdateConsultantArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Consultant | null> {
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Consultant)
  @nestAccessControl.UseRoles({
    resource: "Consultant",
    action: "delete",
    possession: "any",
  })
  async deleteConsultant(
    @graphql.Args() args: DeleteConsultantArgs
  ): Promise<Consultant | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
